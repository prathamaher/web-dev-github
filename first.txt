git commands-->


git init    --->    to initialize a new repository

git status  --->    shows modified files in working directory, 
                    staged or unstaged files for your next commit.

git add     --->    to add modified  files or untracked files to staging area
                    or simply to stage a file.
        
git commit -m “[descriptive message]”   --->      commit your staged content as a new commit snapshot

git config --global user.name “[firstname lastname]”  --->     set a name that is identifiable for credit when review version history

git config --global user.email “[valid-email]”         --->     set an email address that will be associated with each history marker

git branch          --->       list your branches. a * will appear next to the currently active branch

git checkout        --->       switch to another branch and check it out into your working directory

git merge [branch]  --->       merge the specified branch’s history into the current one

git log             --->       show all commits in the current branch’s history


git reset --hard HEAD~1    --->  deletes latest commit

git reset --hard [commit]       --->   clear staging area, rewrite working tree from specified commit

git branch -D [branch name]     ---> to delete the specified branch

git checkout -- .           ---> to get rid of unstaged changes

git reset [file name]      ---> to delete or get rid of staged changes
                                after this commmand the changes get unstaged so to 
                                remove the unstaged changes we again have to use <git checkout -- .> or 
                                <git checkout -- [file name]> 